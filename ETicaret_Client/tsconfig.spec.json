/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

/*  Genel
Angular 13 ile

Client da Admin ve UI olarak iki kısımdan oluşuyor.
Admin içierik yönetimi
UI kullanıcı kısmı 
Admin için ; Order, Product, Customer, Dashbord
UI ; Product, Home, Basket(sepet) componetleri olacak
Tüm componenteler birer module ya sahip olacak.


Kullanıcağımız modüller yönetim dağınık yönrtimini kolaylaştıracak ve 
Rota yönetimi  işlemlerinde  label loding tasarımını kıracağız.


--------------
AppModule 
Angular uygulamalrında ana modül.
Uygulamada kullanılan;tüm modül ve componentlerin(sayfa) declare ve import 
edildiği moduldur.

-------------------
Modüller çalışmalarda önce modüller sonra componentler oluşturulmalı.

module  = m
component = c
Module oluşturma: ng g m admin

1.Admin moodule , UI module 
admin ile ui arasında ki fark , ui default layout,
admin ise iradeli olarak geçmek istenilen yer ve farklı bir layout olacak.

-- Admin module den devam edelim, Layout oluşturmam lazım; ng g m admin/layout

Not : Module importllar en yakın olan componente eklenir
Not : 
Eğerki bir module başka bir modulü kendi içinde benimseyecekse o modulu  kendi içinde 
import etmek zorunda.
Admine layout tu vereceksem admine import  etmem lazım
admin module gel import et.

-- Layout içinde bir tane component olması lazım. Yönetim panelinin tasarımının yapılacağı.
ng g c admin/layout 

-- Angular mimarasinde bir componenti kullanmk istiyorsan onun uygulamanın ana modulüne (app.module)
declare edilmesi gerekiyor.

-- Layout componentin yönrtimi için layoutun componentlerini oluşturalım.(Layoutun componnetleri)
Bir şeyin kendine ait componetleri varsa onların yer  alacağı component isminde modül oluşturup;
ng g m admin/layout/components

onun içine  layoutllatını ekleyelim.
ng g c admin/layout/components/header
ng g c admin/layout/components/sidebar
ng g c admin/layout/components/footer

NOT : Bu componetler en yakın olan yani altında oldukları comopnentmodule declara olarak otomatik eklenirler.

NOT : Bu componentleri artık layout.html de  istediğimiz gibi sergileriz.


NOT NOT : Bu yapılan katmanlarasında iletişim için export yapmam lazım. 
Select edilebilmesi için ilgili componentlerin ilgili module seviyesinde exports edilmeli.
Bunu anşlamaz isen video dan bak.
ders10 : 20.dk

NOT : modulu modüle ekliyorsan import


-- Adminin kendi componentlerini yapalım, ordercoomponent...(bunlaraın toplu olacağı modul ile başlayalım)
ng g m admin/components

VE altına componnetleri:
ng g m admin/components/products  // modelleri ile başlayalım çünkü birde fazla işlem olabiilir listele...
ng g c admin/components/products  // componnetler

ng g m admin/components/order 
ng g c admin/components/order 
...

---------------------------
Uİ İÇİN :
ng g m ui/components

ng g m ui/components/products
ng g c ui/components/products

ng g m ui/components/baskets
ng g c ui/components/baskets

ng g m ui/components/home
ng g c ui/components/home

*/

/*   Angular Multiple Layout

  Single page application olarak tasarlanan Angular mimarisinde, çoklu sayfalama için 
multiple layout kullanılır.

    Routing

Bunun için roto belirleyeceğiz.(Roting)
1. Her bir componente modül seviyesinde  rota belirleyeceğiz.

O componetelrim bulunduğu modul den tasarlayacağım, rotayı.

Adimn  Componentlerinden BAŞLAYALIM:
Customer: 
Customer Modul (customer.module.ts) de yapacağım. {path:"x",component:CustomerComponent}
Dashbord:
Dahbord Modul de :  {path:"",component :DashboardComponent}
....

-----
Uİ Componnetleri
{path:"",component:BasketsComponent}
{path:"",component:HomeComponent}
{path:"",component:ProductsComponent}
.....

-------------------
2. Ana modulde(app modul de) rotolanma  yapacağız.(app.routing.module.ts)
3. Rota işlemlerinden sonra sayfalarda routing ile yönlendşrme yap .

NOT : BİR SAYFADA ROUTRE LİNK KULLANMAM İÇİN ONUN ÜST MODULÜNE RouerModulu import etmem lazım.
*/

/* Bootstrap  - Material  ENTEGRASYON

Adminde material
Uİ da bootstrap kullanılacak.

Angular Material  :  https://material.angular.io/
  ng add @angular/material
 styles.css ye ekle : @import "~@angular/material/prebuilt-themes/indigo-pink.css";
Sayfalarda yapı kullanırken kütüphane importlarını yapmam lazım .MODULE İMPORT ETMEM LAZIM.
Kullanılan yapının css si eklenecek
Ve biz sonrasında kendimiz html lere anlaşılması için isimlerini verdik.
Sonrasında isteğğine göre düzenle
*/

/* Bootstrap
npm install bootstrap : npm i bootstrap
Angular.jsonda ilk "styles" ye "node_modules/bootstrap/dist/css/bootstrap.min.css" yi ekle
 "scripts de   "node_modules/bootstrap/dist/js/bootstrap.min.js"ekle.

*/

/* jquery
    jquery
Query çoklu kod satırlarını tek bir koda sıkıştırır, böylece tek bir göreve ulaşmak 
için bloklarca kodu yeniden yazmak zorunda kalmazsınız.
npm i jquery
angular.json da  script elke.
componentler de erişebilmek için : app.component.ts ye =   declare var $: any  

*/

/*  Alertifyjs
     Alertifyjs  :  https://alertifyjs.com/
Diyolog pencereleri,
Ekrana ufak mesajlar (toastr gibi)

npm install alertifyjs --save
angular.js :
          node_modules/alertifyjs/build/css/alertify.min.css
          node_modules/alertifyjs/build/alertify.min.js  
          node_modules\alertifyjs\build\css\themes\semantic.min.css  ekle

componnetde : declare var alertify: any ekle ve devamını yap

Ve bunu daha kullanışlı kullanmak için kişiselleştiireceğiz.
Angularda özeleştirme  için servis yazalır genelde.


---- Servis için 
ng g s services/admin/alertify

*/

/*  ngx-Toastr
ngx-Toastr  : https://github.com/scttcper/ngx-toastr
Ui kısmında kullanacağız.

npm install ngx-toastr --save
npm install @angular/animations --save (ngx bu pakete bağlı, angularda bu paket default oolarak gelir zaten. yoksa yükle)
angılar.json a  style yükle : "node_modules/ngx-toastr/toastr.css"

Ana module(app) import et

Servis haline getirelim.
ng g s services/ui/customToastr
*/

/*   Ngx-Spinner 
          
          
NOT : VERSİYON KAYNAKLI KURULMADI.
Animasyon Bekleme Altyapısı
npm install ngx-spinner --save
Hangi sekili kullanacaksan onun cssini angularjson a ekle

Her modul seviyesine ekleme yapında sadece modul seviyesindeki componnetlerde kullanabiliyorum.

app.module :  NgxSpinnerModule import et
app html ye  <ngx-spinner type="ball-scale-multiple"></ngx-spinner> ekleyince o şekli kullanıyorum.

Bu yapının kullanımı için basecomponent yaparak diğerlerine exdent edelim.
*/

/*  CORS Politikası
Eğerki client uygulaması browser'da (Opera,Chrome,Mozilla vs.) çalışıyorsa burada CORS politikaları devreye girer.
Browser , benim  üzerinde farklı bir targete(hedefe ) istek gönderemezsin. Browserların bu davranışına Same-origin policy denmektedir.

Browserlar doğal olarak almış oldukları Same-origin policy önlemini aşabilmek için client uygulamasının 
istek gönderdiği hedef siteye/origine/endpoint/apiye öncellikle bu siteden gelecek olan requestlere izni olup olmasığna bakar ve ona göre 
izin verir yada iptal eder.

Same-origin policy, zararlı sitelerin diğer sitelerden browser tabanlı veri okumansını 
engelleyerek büyük bir güvenlik açığını kapatır.

API'lar üzerinden browserların almış oldukkarı doğal same origin policy önleminii hafifletme 
politikasıdır.



Bunun çözümünü API kısmında halledeceğiz.

*/

/* Custom HttpClient Servisi Oluşturmak

Servis oluşturmak için :  ng g s services/common/httpClient

Base Url için, app.module.ts de providers de çalışma yapalım

HttpClientı kullanabilmek için   app.module.ts ye HttpClientModule import edilmeli.

*/

/*  Contracts

API in dönderdiği datanın türü her neyse, o türü karşılayacak bir sınıf oluşturulur. Oluşturluna 
bu sınıf bizim cContracts olacak. 
Gelen datanın direk dönüşümünü sağlar.
İlgili datanın alanlarını bu Contracts sayedsinde, tip güvenli şekilde erişim sağlayabiliirm.


class oluşrmak için  :  ng g cl contracts/product

*/ 

/* Ürün Ekleme

ng g c admin/components/products/create  : ürün ekleme componneti

Listeleme için : ng g c admin/components/products/list


Bu tarz işlemlerde client eklemeyi servisten almalı. ng g s services/common/models/product
Verimi ekleyeceğiz, sileceğiz hepsini bu services üzerinden çekeceğiz.

Creat(ekleme) işlemi yapabilmek için öncelikle html de bunların değerlerini elde edeceğim, ilgili değerleri 
ilgili değerleri productservice nin create fonksiyınuna yollayacağım.
Bunun için inputları işaretleyeceğim. =  #txtName....

*/

/* Fluent Validation İle ValidationFilter    

Gelen datayı istenilen şekilde almak için.
Validation hem uı,hem backend, veri tabanında tüm seviyelerde önlemler alınmalı.
*/

/*  Ürünlerin listelenmesi ve Pagination

sayfalamayı o an ki size a göre veriyi veri tabanından çekeceğiz.
Listeleme için kullandığımzı tablo için bazı ts ayarları mevcut.



*/

/* Delete Directive ile Silme Operasyonlar

Directive : şablonlardaki ögelere  yeni davranışlar ekleyen veya mevcut davranışı değiştiren sınıflardır.
DOM' u manipüle etmek için kullanılır, örneğin dom'a öge eklemek, kaldırmak, öğrelerin görünümünü değiştirmek için 

directive oluştıurmak için : ng g directive directives/admin/delete


*/

